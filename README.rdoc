Deployment URL: http://isg2.herokuapp.com 

More about this project:
* {Project description}[https://sites.google.com/a/eecs.berkeley.edu/cs169-sp13/project/project-list/new-eecs-isg-website]
* {Requirements and Specification}[https://docs.google.com/a/berkeley.edu/document/d/1FFCVl4zkaD3vHaGcd8CqNXJE1hsbGa-wlShnmznga4Q]
* {Design and Planning Documentation Iteration 1}[https://docs.google.com/a/berkeley.edu/document/d/1JWRu2n8t1BD3MLeZHsREn9alPofPiO5_MYX1OyZ3RdQ]

Frontend:
1. /app/assets/javascripts/application.js - adding jquery and bootstrap to Rails
2. /app/assets/stylesheets/custom.css.scss - provides all of our custom css codes for the different ids and classes in the view
3. /app/helpers/application_helper.rb - provides the template for the full title on a web page
4. /app/views/layouts - all the files in here will help structure the initial look of root web page, such as the header, footer, and where the notice and flash messages appear.
5. /app/views/node - the directory here contains the forms that the users or we use to give the information to add a node or child into the tree structure/data. Also, index.html.erb is our root/main web page when users try to access our website. It contains the code that lists the children and resources of the current node we are on. In the beginning, we set it up so that the root is the current node everyone starts on. From then on, it will only show 2 levels of the tree at any point the users search through the tree.
6. /app/assets/images - contains the images for the banner and the plugins of Colorbox and Jquery Treeview.
7. /app/assets/javascripts - contains the javascript codes for the plugins of Colorbox and Jquery Treeview, and our custom javascript code that we coded for the frontend.
8. /app/assets/stylesheets - contains all the css codes for the plugins and our own custom one.
9. /app/helpers - contains all the helpers that include our custom helper functions that we can use in the corresponding views.
10. /app/views - contains all the views and layouts that make up our links, tree view, and entire application.


Backend:
1. /app/controllers/node_controller.rb - contains all the functions that interacts between the tree structure in our model and the view. index contains all the instance variables for the index/root view. create and destroy let the users and us add and remove nodes from the tree structure/model. add_child helps add a child to the parent we want in the tree. node_controller contains various data validation point to ensure that the tree-structure invariant is maintained (that is, no node has multiple parents), and that the root node is always unique.
2. /app/controllers/resource_controller.rb - contains all the functions for modifying the resources for each node in our tree structure. create and destroy let the users and us add and remove resources from any node in the tree.
3. /app/models/node.rb - defines what the node is in our tree structure model. Ancestry is a Ruby gem or API that defines a logical parent-child and ancestors tree structure. We are using it to define our tree structure too, so the node would be a node on a tree that has a parent, unless it is the root. Also, each node can have many resources that contain static links to help pages for that specific problem associated with that node.
4. /app/models/resource.rb - defines what the resource is in our tree structure model for each node. The resource is the solution to a specific problem, which is represented by a node. Therefore, that is why a node can have many resources, and a resource belongs to a node. The resource keeps track of its name, how many times an user visited this resource, and an url that contains a static link that directs to help pages for that specific problem associated with the node it belongs to. Also, each resource is unique.
5. /app/controllers - contains all the controllers for application, resource, node, user, and complaint. It also contains the code for the Calnet Authentication for the login in our application.
6. /app/models - contains all the models and data verification for our models, including resource, node, user, and complaint.

The Rails router that recognizes URL and dispatches them to all of our controllers' actions, dealing with HTTP requests of GET and POST is located at /config/routes.rb. It can also generate paths and URLs, avoiding the need to hardcode strings in our views.

Testing:
1. /spec - Using RSpec to do the unit, integration, and functional testing for our model and controller.
2. /Selenium - Using Selenium to automate some of the UI testing to make sure our views, links, and forms are working properly. There are some limitations, such as Calnet checking and CSS codes, which are explained in further details in the progress report. For example, some tests can't be ran until we manually log into Calnet first. Also, you need to install Selenium IDE and RC for Firefox or some other compatible browser to run the Selenium tests.

The Gemfile contains all of our gems (APIs and plug-ins for Ruby on Rails) that we need to use for our project, including the tree structure and database.