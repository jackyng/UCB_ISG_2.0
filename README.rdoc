Deployment URL: http://isg2.herokuapp.com 

More about this project:
* {Project description}[https://sites.google.com/a/eecs.berkeley.edu/cs169-sp13/project/project-list/new-eecs-isg-website]
* {Requirements and Specification}[https://docs.google.com/a/berkeley.edu/document/d/1FFCVl4zkaD3vHaGcd8CqNXJE1hsbGa-wlShnmznga4Q]
* {Design and Planning Documentation Iteration 1}[https://docs.google.com/a/berkeley.edu/document/d/1JWRu2n8t1BD3MLeZHsREn9alPofPiO5_MYX1OyZ3RdQ]

Frontend:
1. /app/assets/javascripts/application.js - adding jquery and bootstrap to Rails
2. /app/assets/stylesheets/custom.css.scss - provides all of our custom css codes for the different ids and classes in the view
3. /app/helpers/application_helper.rb - provides the template for the full title on a web page
4. /app/views/layouts - all the files in here will help structure the initial look of root web page, such as the header, footer, and where the notice and flash messages appear.
5. /app/views/node - the directory here contains the forms that the users or we use to give the information to add a node or child into the tree structure/data. Also, index.html.erb is our root/main web page when users try to access our website. It contains the code that lists the children and resources of the current node we are on. In the beginning, we set it up so that the root is the current node everyone starts on. From then on, it will only show 2 levels of the tree at any point the users search through the tree.

Backend:
1. /app/controllers/node_controller.rb - contains all the functions that interacts between the tree structure in our model and the view. index contains all the instance variables for the index/root view. create and destroy let the users and us add and remove nodes from the tree structure/model. add_child helps add a child to the parent we want in the tree. node_controller contains various data validation point to ensure that the tree-structure invariant is maintained (that is, no node has multiple parents), and that the root node is always unique.
2. /app/models/node.rb - defines what the node is in our tree structure model. Ancestry is a Ruby gem or API that defines a logical parent-child and ancestors tree structure. We are using it to define our tree structure too, so the node would be a node on a tree that has a parent, unless it is the root. Also, each node can have many resources that contain static links to help pages for that specific problem associated with that node.
